; TODO: Update test so that it isn't affected by system time zone.
;
; This issue was discovered while traveling.

import io
import test
import time

self.expect = test.expect

test.Tester().test(self)

@test.TestClass
class TimeTest {
  field tmp_clock

  @test.SetUp
  method set_up() {
    tmp_clock = time.clock
    time.clock = time.Clock(
      () -> time.Timestamp(2023, 5, 28, 13, 45, 22, 666),
      () -> 1685306722666000)
  }

  @test.TearDown
  method tear_down() {
    time.clock = tmp_clock
    tmp_clock = None
  }

  @test.Test
  method test_current_timestamp() {
    expect(
      time.current_timestamp(), 
      time.Timestamp(2023, 5, 28, 13, 45, 22, 666))
  }
  
  @test.Test
  method test_timestamp_from_micros() {
    expect(
      time.timestamp_from_micros(1685306722666000),
      time.Timestamp(2023, 5, 28, 13, 45, 22, 666))
  }
  
  @test.Test
  method test_date_from_timestamp() {
    expect(
      time.date_from_timestamp(time.Timestamp(2023, 5, 28, 13, 45, 22, 666)),
      time.Date(2023, 5, 28))
  }

  @test.Test
  method test_current_date() {
    expect(
      time.current_date(),
      time.Date(2023, 5, 28))
  }

  @test.Test
  method test_date_from_days_since_epoch() {
    expect(
      time.date_from_days_since_epoch(19505),
      time.Date(2023, 5, 28))
  }
}

@test.TestClass
class TimestampTest {
  @test.Test
  method test_Timetamp_to_s() {
    ts = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    expect(ts.to_s(), '2023-05-28T13:45:22.666Z')
  }

  @test.Test
  method test_Timetamp_to_micros() {
    ts = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    expect(ts.to_micros(), 1685306722666000)
  }

  @test.Test
  method test_Timetamp_to_date() {
    ts = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    expect(ts.to_date(), time.Date(2023, 5, 28))
  }

  @test.Test
  method test_Timestamp_to_micros() {
    ts = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    expect(ts.to_micros(), 1685306722666000)
  }

  @test.Test
  method test_Timestamp_equals() {
    ts = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    expect(ts == ts, True)
    expect(ts != ts, False)
  }

  @test.Test
  method test_Timestamp_compare() {
    ts1 = time.Timestamp(2023, 5, 28, 13, 45, 22, 666)
    ts2 = time.Timestamp(2024, 6, 29, 13, 45, 22, 666)
    expect(cmp(ts1, ts2), -1)
  }
}

@test.TestClass
class DateTest {
  @test.Test
  method test_Date_to_s() {
    d = time.Date(2023, 5, 28)
    expect(d.to_s(), '2023-05-28')
  }

  @test.Test
  method test_Date_to_timestamp() {
    d = time.Date(2023, 5, 28)
    expect(d.to_timestamp(), time.Timestamp(2023, 5, 28))
  }

  @test.Test
  method test_Date_get_days_since_epoch() {
    d = time.Date(2023, 5, 28)
    expect(d.get_days_since_epoch(), 19505)
  }

  @test.Test
  method test_Date_add_days() {
    d = time.Date(2023, 5, 28)
    expect(d.add_days(5), time.Date(2023, 6, 2))
  }

  @test.Test
  method test_Date_add_months() {
    d = time.Date(2023, 5, 28)
    expect(d.add_months(2), time.Date(2023, 7, 28))
  }

  @test.Test
  method test_Date_add_years() {
    d = time.Date(2023, 5, 28)
    expect(d.add_years(3), time.Date(2026, 5, 28))
  }
}

@test.TestClass
class TimerTest {
  field tmp_clock

  method _advance_clock_micros(micros) {
    now = time.clock.now_usec()
    time.clock.now_usec = () -> now + micros
  }

  @test.SetUp
  method set_up() {
    tmp_clock = time.clock
    time.clock = time.Clock(
      () -> time.Timestamp(2023, 5, 28, 13, 45, 22, 666),
      () -> 1685306722666000)
  }

  @test.TearDown
  method tear_down() {
    time.clock = tmp_clock
    tmp_clock = None
  }

  @test.Test
  method test_current_timestamp() {
    t = time.Timer()
    t.start()
    _advance_clock_micros(5 * time.MILLIS_PER_SECOND * time.NANOS_PER_MILLI)
    t.mark('test')

    expect(
      t.elapsed_usec(),
      [('test', 5 * time.MILLIS_PER_SECOND * time.NANOS_PER_MILLI)]
    )

    t.reset()
    expect(t.elapsed_usec(), [])
  }
}