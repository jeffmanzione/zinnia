import data
import io
import test

self.expect = test.expect

test.Tester().test(self)

@test.TestClass
class Int8ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int8Array)
  }
}

@test.TestClass
class Int32ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int32Array)
  }
}

@test.TestClass
class Int64ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Int64Array)
  }
}

@test.TestClass
class Float32ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Float32Array)
  }
  
  @test.Test
  method test_float() {
    arr = class([0.5, 1.5, 2.5, 3.5, 4.5])
    expect(arr.to_arr(), [0.5, 1.5, 2.5, 3.5, 4.5])
    expect(str(arr), class.name() + '([0.5, 1.5, 2.5, 3.5, 4.5])')
  }
}

@test.TestClass
class Float64ArrayTest : ArrayTest {
  new() {
    super(ArrayTest)(data.Float64Array)
  }
  
  @test.Test
  method test_float() {
    arr = class([0.5, 1.5, 2.5, 3.5, 4.5])
    expect(arr.to_arr(), [0.5, 1.5, 2.5, 3.5, 4.5])
    expect(str(arr), class.name() + '([0.5, 1.5, 2.5, 3.5, 4.5])')
  }
}

@test.TestClass
class Int8MatrixTest : MatrixTest {
  new() {
    super(MatrixTest)(data.Int8Matrix, data.Int8Array)
  }
}

@test.TestClass
class Int32MatrixTest : MatrixTest {
  new() {
    super(MatrixTest)(data.Int32Matrix, data.Int32Array)
  }
}

@test.TestClass
class Int64MatrixTest : MatrixTest {
  new() {
    super(MatrixTest)(data.Int64Matrix, data.Int64Array)
  }
}

@test.TestClass
class Float32MatrixTest : MatrixTest {
  new() {
    super(MatrixTest)(data.Float32Matrix, data.Float32Array)
  }
}


@test.TestClass
class Float64MatrixTest : MatrixTest {
  new() {
    super(MatrixTest)(data.Float64Matrix, data.Float64Array)
  }
}

class ArrayTest {
  new(field class) {}

  @test.Test
  method test_default() {
    arr = class()
    expect(arr.to_arr(), [])
    expect(str(arr), class.name() + '([])')
  }

  @test.Test
  method test_passed_size() {
    arr = class(5)
    expect(arr.to_arr(), [0, 0, 0, 0, 0])
    expect(str(arr), class.name() + '([0, 0, 0, 0, 0])')
  }

  @test.Test
  method test_passed_few_values() {
    arr = class([0, 1, 2, 3, 4])
    expect(arr.to_arr(), [0, 1, 2, 3, 4])
    expect(str(arr), class.name() + '([0, 1, 2, 3, 4])')
  }

  @test.Test
  method test_passed_many_values() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    expect(arr.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    expect(str(arr), class.name() + '([0, 1, 2, 3, 4, ...9])')
  }

  @test.Test
  method test_index_range_no_skips() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[2:5]
    expect(str(subarr), class.name() + '([2, 3, 4])')
    expect(subarr.to_arr(), [2, 3, 4])
  }

  @test.Test
  method test_index_range_with_skips() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[2:7:2]
    expect(str(subarr), class.name() + '([2, 4, 6])')
    expect(subarr.to_arr(), [2, 4, 6])
  }

  @test.Test
  method test_index_reverse() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    subarr = arr[7:2:(-1)]
    expect(str(subarr), class.name() + '([7, 6, 5, 4, 3])')
    expect(subarr.to_arr(), [7, 6, 5, 4, 3])
  }

  @test.Test
  method test_set_range() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    arr[2:9:2] = class([1, 2, 3, 4])
    expect(str(arr), class.name() + '([0, 1, 1, 3, 2, ...9])')
    expect(arr.to_arr(), [0, 1, 1, 3, 2, 5, 3, 7, 4, 9])
  }
  
  @test.Test
  method test_copy() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    cpy = arr.copy()
    expect(str(cpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(cpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_reversed() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    rcpy = arr.reversed()
    expect(str(rcpy), class.name() + '([9, 8, 7, 6, 5, ...0])')
    expect(rcpy.to_arr(), [9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
  }

  @test.Test
  method test_sorted() {
    arr = class([0, 9, 1, 8, 2, 7, 3, 6, 4, 5])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_sorted_already_sorted() {
    arr = class([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }

  @test.Test
  method test_sorted_reversed() {
    arr = class([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
    rcpy = arr.sorted()
    expect(str(rcpy), class.name() + '([0, 1, 2, 3, 4, ...9])')
    expect(rcpy.to_arr(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  }
}

class MatrixTest {
  field mat

  new(field class, field array_class) {}

  @test.SetUp
  method set_up() {
    mat = class(
      [
        [0, 1, 2, 3, 4],
        [5, 6, 7, 8, 9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]
      ]
    )
  }

  @test.Test
  method test_index_dim1() {
    expect(str(mat[2]), str(array_class([10, 11, 12, 13, 14])))
    expect(
      str(mat[1:4:2]),
      str(class([
        [5, 6, 7, 8, 9],
        [15, 16, 17, 18, 19]
      ]))
    )
  }

  @test.Test
  method test_index_single() {
    expect(mat[2, 2], 12)
    expect(str(mat[2, (1, 3)]), str(array_class([11, 13])))
    expect(str(mat[2, (1:4)]), str(array_class([11, 12, 13])))
  }

  @test.Test
  method test_index_tuple() {
    expect(str(mat[(1, 3), 2]), str(array_class([7, 17])))
    expect(
      str(mat[(1, 3), (1, 3)]),
      str(class([
        [6, 8],
        [16, 18]
      ]))
    )
    expect(
      str(mat[(1, 3), (1:4:2)]),
      str(class([
        [6, 8],
        [16, 18]
      ]))
    )
  }

  @test.Test
  method test_index_range() {
    expect(str(mat[(1:4:2), 2]), str(array_class([7, 17])))
    expect(
      str(mat[(1:4:2), (1, 3)]),
      str(class([
        [6, 8],
        [16, 18]
      ]))
    )
    expect(
      str(mat[(1:4:2), (1:4:2)]),
      str(class([
        [6, 8],
        [16, 18]
      ]))
    )
  }

  @test.Test
  method test_set() {
  	mat[(0, 2), (0:5)] = class(
      [
        [4, 3, 2, 1, 0],
        [14, 13, 12, 11, 10]
      ])
    expect(
      str(mat),
      str(class([
        [4, 3, 2, 1, 0],
        [5, 6, 7, 8, 9],
        [14, 13, 12, 11, 10],
        [15, 16, 17, 18, 19]
      ]))
    )
  }
}
