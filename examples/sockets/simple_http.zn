import io
import net
import socket
import struct

; A very simple HTTP server that can be used to serve static content.
;
; Either directly invoke SimpleHttpServer(dir, port).start() or from the command line:
; 
; ```
;   zinnia examples/sockets/simple_http.zn -- --dir=. --port=8080
; ```
class SimpleHttpServer {
  field cache, stop_called, sock ;, fw
  new(field dir, field port) {
    cache = struct.LoadingCache(factory: _read_file)
    ;fw = io.FileWatcher()
    ;fw.watch(dir)
    ;fw.listen(
    ;    e -> cache.clear(cat('/', e.file_name)),
    ;    io.IN_CLOSE_WRITE | io.IN_MODIFY | io.IN_MOVE)
    stop_called = False
  }

  method start() async {
    sock = net.HttpSocket(socket.create_server_socket('0.0.0.0', port))
    while ~stop_called {
      handle = await sock.accept()
      request = await handle.receive()
      try {
        io.println(cat('Received request: ', request.type, ' ', request.path))
        response = net.HttpResponse()
        if _is_icon(request) {
          response.set_content_type('image/x-icon')
        }
        if request.path == '/' {
          path = '/index.html'
        }
        response_content = cache.get(request.path)
        if ~response_content {
          response.set_status_code(404)
              .set_status('NOT FOUND')
              .add_content('<title>Page not found</title><h1>Sorry, page not found.</h1>')
        } else {
          response.add_content('<pre>')
              .add_content(response_content)
              .add_content('</pre>')
        }
        await handle.send(response)
      } catch e {
        io.fprintln(io.ERROR, e)
      }
      handle.close()
    }
    sock.close()
  }

  method _is_icon(request) {
    return request.path.ends_with('.ico')
  }

  method _read_file(file_name) {
    try {
      return io.FileReader(cat(dir, file_name)).getall()
    } catch e {
      io.fprintln(io.ERROR, e)
      return None
    }
  }

  method stop() {
    stop_called = True
  }
}

if __main {
  dir = args.dir | '.'
  port = Int(args.port | 8080)
  await SimpleHttpServer(dir, port).start()
}