import builtin_ext
import error
import io
import struct

def str(input) {
  if (input is Object) return input.to_s()
  __stringify(input)  ; Native C function
}

def cat(args) {
  result = ''
  if ~(args is Tuple) {
    result.extend(str(args))
    return result
  }
  for i=0, i < args.len(), i=i+1 {
    result.extend(str(args[i]))
  }
  return result
}

def hash(x) {
  if x is Object {
    return x.hash()
  }
  return Int(x)
}

def cmp(o1, o2) {
  if (o1 is Object) and ~(o2 is Object) {
    return -1
  }
  if (o2 is Object) and ~(o1 is Object) {
    return 1
  }
  if (o1 is Object) and o1.__cmp__ {
    return o1.__cmp__(o2)
  }
  if o1 == o2 {
     return 0
  }
  if o2 > o1 {
    return -1
  }
  return 1
}

def tuple(args) {
  if args is Tuple {
    return args
  } else if ~(args is Array) {
    raise error.Error('Cannot tuple something not an Array.')
  }
  t = __tuple(args)
  return t
}

class Object {
  method to_s() {
    return cat(
        'Instance of ',
        self.class().module().name(),
        '.',
        self.class().name())
  }
}

class Module {
  method to_s() {
    return cat('Module(', name(), ')')
  }
}

class Class {
  field annotations
  method to_s() {
    if annotations.len() > 0 {
      cls_name =  'class ' + name()
      for (_, a) in annotations {
        cls_name = cls_name + ' @' + str(a.class().name())
      }
      return cls_name
    } else {
      return cat('class ', name())
    }
  }
  method add_annotation(annot) {
    annotations.append(annot)
  }
  method all_annotations() {
    return annotations
  }
  method all_methods() {
    meths = methods()
    sup = super()
    while sup {
      sup.methods().each(m -> meths.append(m))
      sup = sup.super()
    }
    return meths
  }
}

class String {
  method to_s() {
    return self
  }
  method join(strs) {
    result = ''
    if strs.len() == 0 {
      return result
    }
    result.extend(str(strs[0]))
    for i=1, i<strs.len(), i=i+1 {
      result.extend(self)
      result.extend(str(strs[i]))
    }
    return result
  }
  method substr(start_index, num_chars=None) {
    if ~num_chars {
      num_chars = len() - start_index
    }
    end_index = start_index + num_chars
    if start_index <= end_index {
      return __substr(start_index, end_index)
    }
    return __substr(end_index, start_index)
  }
  method find(sub, index=0) {
    __find(sub, index)
  }
  method find_all(sub, index=0) {
    __find_all(sub, index)
  }
  method __in__(sub) {
    find(sub) != None
  }
  method starts_with(other) {
    if ~(other is String) {
      return False
    }
    return __starts_with(other)
  }
  method ends_with(other) {
    if ~(other is String) {
      return False
    }
    return __ends_with(other)

  }
}

class Tuple {
  method ==(other) {
    if (~(other is Tuple) or len() != other.len()) return False
    for i=0, i<len(), i=i+1 {
      if (self[i] != other[i]) {
        return False
      }
    }
    return True
  }
  method !=(other) {
    if (len() != other.len()) return True
    for i=0, i<len(), i=i+1 {
      if (self[i] != other[i]) {
        return True
      }
    }
    return False
  }
  method to_s() {
    result = '('
    result.extend(_maybe_wrap_in_quotes(self[0]))
    for i = 1, i < len(), i = i + 1 {
      result.extend(', ')
          .extend(_maybe_wrap_in_quotes(self[i]))
    }
    result.extend(')')
    return result
  }
  method iter() {
    return IndexIterator(self, 0, len())
  }
  method _maybe_wrap_in_quotes(elt) {
    if (elt is String) {
      return '\''.extend(elt).extend('\'')
    } else {
      return str(elt)
    }
  }
}

class Array {
  method ==(other) {
    if (~(other is Array) or len() != other.len()) return False
    for i=0, i<len(), i=i+1 {
      if (self[i] != other[i]) {
        return False
      }
    }
    return True
  }
  method !=(other) {
    if (len() != other.len()) return True
    for i=0, i<len(), i=i+1 {
      if self[i] != other[i] {
        return True
      }
    }
    return False
  }
  method remove(i) {
    i = Int(i)
    if i >= len() or i < 0 {
      raise error.Error(cat('Index is out of bounds: ', i, ', Array length: ', len()))
    }
    return __remove(i)
  }
  method remove_value(v) {
    for i=0, i<len(), i=i+1 {
      if self[i] == v {
        remove(i)
        return True
      }
    }
    return False
  }
  method to_s() {
    result = '['
    result.extend(', '.join(map((elt) {
      if (elt is String) {
        return '\''.extend(elt).extend('\'')
      } else {
        return str(elt)
      }
    })))
    return result.extend(']')
  }
  method each(fn) {
    for i=0, i<len(), i=i+1 {
      fn(self[i])
    }
  }
  method map(fn) {
    result = []
    if len() == 0 {
      return result
    }
    result[len()-1] = None
    for i=0, i<len(), i=i+1 {
      result[i] = fn(self[i])
    } 
    return result
  }
  method where(filter_fn) {
    result = []
    for i=0, i<len(), i=i+1 {
      if filter_fn(self[i]) {
        result.append(self[i])
      }
    } 
    return result
  }
  method has(has_fn) {
    for i=0, i<len(), i=i+1 {
      if has_fn(self[i]) {
        return True
      }
    }
    return False
  }
  method collect(f, s=None) {
    if len() == 0 {
      if s is Function {
        return s()
      } else {
        return s
      }
    }
    i = 0
    a = None
    if s {
      if s is Function {
        a = s()
      } else {
        a = s
      }
    } else {
      a = self[0]
      i = 1
    }
    for _, i<len(), i=i+1 {
      a = f(a, self[i])
    }
    return a
  }
  method iter() {
    return IndexIterator(self)
  }
}

class Function {
  method to_s() {
    res = None
    if self.is_method() {
      res = cat(
          'Method(',
          self.module().name(),
          '.', self.parent_class().name(),
          '.', self.name())
    } else {
      res = cat('Function(', self.module().name(), '.', self.name())
    }
    if self.annotations and self.annotations.len() > 0 {
      res.extend(', annotations=')
      res.extend(str(self.annotations))
    }
    res.extend(')')
    res
  }
  method add_annotation(annot) {
    self.annotations.append(annot)
  }
}

class FunctionRef {
  method to_s() {
    cat('FunctionRef(obj=', self.obj(), ',func=', self.func(), ')')
  }
}

class Range {
  method to_s() {
    cat(start(), ':', inc(), ':', end())
  }
  method __in__(n) {
    (n <= end()) and (n >= start()) and (n % inc() == start() % inc())
  }
  method [](i) {
    if (i < 0) raise error.Error(cat('Range index out of bounds. was ', i))
    val = start() + i * inc()
    if (val > end()) raise error.Error(cat('Range index out of bounds. was ', i))
    val
  }
  method len() {
    (self.end() - self.start()) / self.inc()
  }
  method iter() {
    IndexIterator(self, 0, len())
  }
}

self.Iterator = builtin_ext.Iterator
self.IndexIterator = builtin_ext.IndexIterator
self.KVIterator = builtin_ext.KVIterator
self.range = builtin_ext.range
self.memoize = builtin_ext.memoize
self.sort = builtin_ext.sort
