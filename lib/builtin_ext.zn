import error

_ = None

class Iterator {
  new(field has_next, field next) {}
  method iter() {
    return self
  }
}

class IndexIterator : Iterator {
  field indexable, start, end, i, index
  new(args) {
    if (args is Array) or (args is String) {
      indexable = args
      start = 0
      end = args.len()
    } else if args is Tuple {
      (indexable, start, end) = args
    } else {
      raise error.Error(concat('Strange input: ', args))
    }
    i = -1
    index = start - 1
    super(Iterator)(
        () -> index < (end - 1),
        () {
          i = i + 1
          index = index + 1
          return (i, indexable[index])
        })
  }
}

class KVIterator : Iterator {
  new(field key_iter, field container) {
    super(Iterator)(
        key_iter.has_next,
        () {
          k = key_iter.next()[1]
          return (k, container[k]) ; return required.
        })
  }
}

def range(params) {
  start = params[0]
  if params.len() == 3 {
    inc = params[1]
    end = params[2]
  } else {
    inc = 1
    end = params[1]
  }
  Range(start, inc, end)
}

def memoize(fn) {
  cache = {}
  memoized_fn = (args) {
    result = cache[args]
    if ~result {
      result = fn(args)
      cache[args] = result
    }
    return result
  }
  return memoized_fn
}

def _partition(seq, l, h, cmp) {
  pivot = seq[h]
  i = l - 1
  for j = l, j < h, j = j + 1 {
    if cmp(seq[j], pivot) > 0 {
      i = i + 1
      tmp = seq[i]
      seq[i] = seq[j]
      seq[j] = tmp
    }
  }
  tmp = seq[i + 1]
  seq[i + 1] = seq[h]
  seq[h] = tmp
  return i + 1
}

def _quick_sort(seq, l, h, cmp) {
  if l < h {
    p = _partition(seq, l, h, cmp)
    _quick_sort(seq, l, p - 1, cmp)
    _quick_sort(seq, p + 1, h, cmp)
  }
  seq
}

def sort(seq, cmp=cmp) {
  _quick_sort(seq, 0, seq.len() - 1, cmp)
}