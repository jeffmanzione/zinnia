; Basic math functions.

; A very small number that is greater than 0.
self.EPSILON = 0.000001

; Pi approximated.
;
; The ratio of the circumference of the circle to its diameter.
; Note: This is only a constant approximation of pi at double precision.
;
self.PI = 3.141592653589793

; Euler's number approximated.
;
; It approximates the value of (1 + 1/n)*n as n approaches infinity. It is the
; base of natural logarithm.
;
self.E = exp(1)

; Returns the comparatively smalles number from [sequence].
function min(sequence) {
	m = sequence[0]
  for i=1, i < sequence.len(), i=i+1 {
    if sequence[i] < m {
      m = sequence[i]
    }
  }
  m
}

; Returns the comparatively largest number from [sequence].
function max(sequence) {
	m = sequence[0]
  for i=1, i < sequence.len(), i=i+1 {
    if sequence[i] > m {
      m = sequence[i]
    }
  }
  m
}

; Returns the value of [num] raised to [power], i.e., num^power.
; function pow(num, power) {}

; Returns the absolute value of [x].
; function abs(x) {}

; Returns the ceiling of [x].
; function ceil(x) {}

; Returns the floor of [x].
; function floor(x) {}

; Returns the logarithm of the specified value [x] with base [base].
function log(x, base=math.E) {
  __log(x, base)
}

; Returns the natural logarithm of the specified valued [x].
function ln(x) {
  log(x)
}

; Returns the base-10 logarithm of the specified value [x].
function log10(x) {
  log(x, 10)
}

; Returns the square root of [x].
function sqrt(x) pow(x, 0.5)

; Returns the remainder of [n] divided by [d].
; function mod(n, d) {}

; Returns (n / d, mod(n, d)).
function div(n, d) {
  return (n / d, mod(n, d))
}

; Like [n] / [d], except when [d] is 0, then returns None.
function safe_divide(n, d) {
  if d == 0 {
    return None
  }
  return n / d
}