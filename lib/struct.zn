import builtin
import math

class Map {
  field table, keys
  new(field sz=31) {
    table = []
    table[sz] = None
    keys = []
  }
  method _hash(k) {
    hval = builtin.hash(k)
    pos = hval % sz
    if pos < 0 pos = -pos
    return pos
  }
  ; Associates the key k with the value v in the map.
  method []=(k, v) {
    pos = _hash(k)
    entries = table[pos]
    if ~entries {
      table[pos] = [(k,v)]
      keys.append(k)
      return None
    }
    for i=0, i<entries.len(), i=i+1 {
      if k == entries[i][0] {
        old_v = entries[i][1]
        entries[i] = (k,v)
        return old_v
      }
    }
    entries.append((k,v))
    keys.append(k)
    return None
  }
  ; Returns the associated value with key k.
  method [](k) {
    pos = _hash(k)
    entries = table[pos]
    if ~entries {
      return None
    }
    for i=0, i<entries.len(), i=i+1 {
      if k == entries[i][0] {
        return entries[i][1]
      }
    }
    return None
  }
  ; Returns the value associated with k, if there is one, otherwise None.
  method __in__(k) {
    self[k]
  }
  ; Removes the entry in the set with the given key k.
  method remove(k) {
    pos = _hash(k)
    entries = table[pos]
    if ~entries {
      return None
    }
    for i=0, i<entries.len(), i=i+1 {
      if k == entries[i][0] {
        old_v = entries[i][1]
        entries.remove(i)
        keys.remove_value(k)
        return old_v
      }
    }
    return None
  }
  method get_or_default(k, d) {
    v = self[k]
    if ~v {
      return d
    }
    return v
  }
  method get_or_else(k, fn) {
    v = self[k]
    if ~v {
      return fn(k)
    }
    return v
  }
  method put_if_absent(k, v) {
    if ~(k in self) {
      self[k] = v
    }
  }
  method compute(k, remapping_fn) {
    old_value = self[k]
    new_value = remapping_fn(k, old_value)
    if new_value {
      self[k] = new_value
    } else if old_value {
      remove(k)
    }
    return new_value
  }
  method compute_if_absent(k, mapping_fn) {
    if ~(k in self) {
      new_value = mapping_fn(k)
      if new_value {
        self[k] = new_value
      }
      return new_value
    }
    return None
  }
  method compute_if_present(k, remapping_fn) {
    old_value = self[k]
    if old_value {
      new_value = remapping_fn(k, old_value)
      if new_value {
        self[k] = new_value
      } else {
        remove(k)
      }
      return new_value
    }
    return None
  }
  method iter() {
    return KVIterator(keys.iter(), self)
  }
  method each(f) {
    for (k, v) in self {
      f(k, v)
    }
  }
  method to_s() {
    kvs = []
    each((k, v) {
      key = if k is String then '\''.extend(k).extend('\'') else str(k)
      value = if v is String then '\''.extend(v).extend('\'') else str(v)
      kvs.append(cat(key, ': ', value))
    })
    return cat('{', ', '.join(kvs), '}')
  }
}


class Cache {
  field map
  new(sz=31) {
    map = Map(sz)
  }
  method get(k, factory, default=None) {
    v = map[k]
    if v {
      return v
    }
    try {
      v = factory(k)
    } catch e {
      v = default
    }
    map[k] = v
    return v
  }
  method clear(k) {
    map[k] = None
  }
}

class LoadingCache {
  new({field cache=Cache(255), field factory}) {}
  method get(k) {
    cache.get(k, factory) 
  }

  method clear() {
    cache.clear()
  }
}

; A collection that contains no duplicate elements.
class Set {
  field map
  new(sz=255) {
    map = Map(sz)
  }
  ; Inserts a given element k into the Set.
  method insert(k) {
    map[k] = k
  }
  ; Removes a given element k from the Set.
  method remove(k) {
    map.remove(k)
  }
  ; Return k if k is in the Set, otherwise None.
  method __in__(k) {
    k in map
  }
}

class _TreeNode {
  field left, right, height
  new(field value) {
    left = None
    right = None
    height = 1
  }
  
  method to_s() {
    '_TreeNode(' + str(value) + ')'
  }
}

; Stores a set of comparable values in a self-balancing binary tree.
; 
; Properities
;   Insertion: O(logN)
;   Removal:   O(logN)
;   Lookup:    O(logN)
;   Traversal: O(N)
;   Sorting:   O(N) - to construct list
;
; This is implemented as a classic AVL Tree which incrementally balances during
; insertion.
class TreeSet {
  field root
  new() {
    root = None
  }

  ; Inserts [v] into the tree.
  ; O(logN)
  method insert(v) {
    root = _insert_helper(v, root)
  }

  ; Inserts all members of [l] into the tree.
  ; O(N*logN)
  method insert_all(l) {
    for i=0, i < l.len(), i=i+1 {
      insert(l[i])
    }
  }

  method _insert_helper(v, node) {
    if ~node {
      return _TreeNode(v)
    }
    if v < node.value {
      node.left = _insert_helper(v, node.left)
    } else {
      node.right = _insert_helper(v, node.right)
    }

    node.height = 1 + math.max(_height(node.left), _height(node.right))

    balance = _balance(node)
    if balance > 1 {
      if v >= node.left.value {
        node.left =  _rotate_left(node.left)
      }
      return _rotate_right(node)
    } else if balance < -1 {
      if v <= node.right.value {
        node.right = _rotate_right(node.right)
      }
      return _rotate_left(node)
    }
    node
  }

  ; Removes [v] from the tree.
  ; O(logN)
  method remove(v) {
    _remove_helper(v, root)
  }

  method _remove_helper(v, node) {
    if ~node {
      return node
    } else if v < node.value {
      node.left = _remove_helper(v, node.left)
    } else if v > node.value {
      node.right = _remove_helper(v, node.right)
    } else {
      if ~node.left {
        return node.right
      } else if ~node.right {
        return node.left
      }
      temp = _min_value_node(node.right)
      node.value = temp.value
      node.right = _remove_helper(temp.value, node.right)
    }
    
    node.height = 1 + math.max(_height(node.left), _height(node.right))

    balance = _balance(node)

    if balance > 1 {
      if _balance(node.left) >= 0 {
        return _rotate_right(node)
      } else {
        node.left = _rotate_left(node.left)
        return _rotate_right(node)
      }
    } else if balance < -1 {
      if _balance(node.right) <= 0 {
        return _rotate_left(node)
      } else {
        node.right = _rotate_right(node.right)
        return _rotate_left(node)
      }
    }
    node
  }

  ; O(logN)
  method __in__(v) {
    _in(v, root)
  }

  method _in(v, node) {
    if ~node {
      return False
    }
    c = builtin.cmp(v, node.value)
    if c == 0 {
      return True
    }
    if c < 0 and _in(v, node.left) {
      return True
    }
    if c > 0 and _in(v, node.right) {
      return True
    }
    return False
  }

  method _min_value_node(node) {
    if ~node or ~node.left {
      return node
    }
    _min_value_node(node.left)
  }

  method _height(node) {
    if ~node {
      return 0
    }
    return node.height
  }

  method _balance(node) {
    if ~node {
      return 0
    }
    return _height(node.left) - _height(node.right)
  }

  method _rotate_left(node) {
    y = node.right
    t2 = y.left
    y.left = node
    node.right = t2
    node.height = 1 + math.max(_height(node.left), _height(node.right))
    y.height = 1 + math.max(_height(y.left), _height(y.right))
    return y
  }

  method _rotate_right(node) {
    y = node.left
    t3 = y.right
    y.right = node
    node.left = t3
    node.height = 1 + math.max(_height(node.left), _height(node.right))
    y.height = 1 + math.max(_height(y.left), _height(y.right))
    return y
  }

  method _inorder(node, arr) {
    if ~node {
      return
    }
    _inorder(node.left, arr)
    arr.append(node.value)
    _inorder(node.right, arr)
  }

  ; Returns a sorted-order Array of the elements.
  ; O(N)
  method sorted() {
    arr = []
    _inorder(root, arr)
    return arr
  }

  ; Returns an iterator over the tree elements in sorted order.
  ; O(N)
  method iter() {
    IndexIterator(sorted())
  }
}
